{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ma",
				"magic_number"
			],
			[
				"magi",
				"magic_number"
			],
			[
				"sa",
				"savePNM"
			],
			[
				"test",
				"test1"
			],
			[
				"tes",
				"test1"
			],
			[
				"m_",
				"m_width"
			],
			[
				"c",
				"cwfunc"
			],
			[
				"image",
				"image_set"
			],
			[
				"al",
				"alloc"
			],
			[
				"uin",
				"uint32_t"
			],
			[
				"wi",
				"width"
			],
			[
				"max",
				"m_max_pixel_chanel"
			],
			[
				"pfm",
				"pfm_t"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"grey",
				"grey_val"
			],
			[
				"sta",
				"static"
			],
			[
				"fil",
				"file_path"
			],
			[
				"un",
				"uint8_t"
			],
			[
				"m_blo",
				"m_block_height"
			],
			[
				"a",
				"alloc"
			],
			[
				"ERRO",
				"ERROR_OPEN"
			],
			[
				"mag",
				"magic_number"
			],
			[
				"m_da",
				"m_data_2D"
			],
			[
				"pixe",
				"pixelBlock"
			],
			[
				"m_data",
				"m_data_1D"
			],
			[
				"hw",
				"hwloc-1"
			],
			[
				"det",
				"dest"
			],
			[
				"ru",
				"ru_majflt"
			],
			[
				"m_r",
				"m_rusage_start"
			],
			[
				"m_ma",
				"m_minor_page_faults"
			],
			[
				"m_m",
				"m_minor_page_faults"
			],
			[
				"be",
				"bench"
			],
			[
				"m_sta",
				"m_core_start"
			],
			[
				"m_core",
				"m_core_end"
			],
			[
				"m_ep",
				"m_eplased_time"
			],
			[
				"in",
				"info"
			],
			[
				"print",
				"printCycleCounter"
			],
			[
				"b",
				"beginend	$1.begin(), $1.end()"
			],
			[
				"sch",
				"sched_priority"
			],
			[
				"sys",
				"syscall"
			],
			[
				"def",
				"defined"
			],
			[
				"cpu",
				"cpu"
			],
			[
				"set",
				"setBit"
			],
			[
				"clea",
				"clearAll"
			],
			[
				"Alloc",
				"allocCPUMask"
			],
			[
				"cy",
				"CycleOverhead"
			],
			[
				"m_c",
				"m_cycle_overhead"
			],
			[
				"m_cy",
				"m_cycle_overhead"
			],
			[
				"Stop",
				"StopCountCycles"
			],
			[
				"msr",
				"msr_driver_path"
			],
			[
				"SA",
				"SA_BENCHMARK_HPP_INCLUDED"
			],
			[
				"stati",
				"static_cast"
			],
			[
				"get",
				"getpid"
			],
			[
				"m",
				"m_timer_start"
			],
			[
				"read",
				"readTSC"
			],
			[
				"po",
				"policy"
			],
			[
				"allocat",
				"allocator"
			],
			[
				"bia",
				"bitmask"
			],
			[
				"size",
				"size_t"
			],
			[
				"node",
				"nodemask"
			],
			[
				"pid",
				"pid_t"
			],
			[
				"nod",
				"node1"
			],
			[
				"int",
				"int32_t"
			],
			[
				"ex",
				"m_exit_on_warn"
			],
			[
				"bit",
				"bitmask"
			],
			[
				"no",
				"noexcept"
			],
			[
				"numa",
				"numa_available"
			],
			[
				"INCLUDE",
				"INCLUDE_DIRECTORIES"
			],
			[
				"ven",
				"vendor4"
			],
			[
				"tra",
				"traceImpl"
			],
			[
				"COM",
				"COMPILER_INFORMATION"
			],
			[
				"OPEN",
				"OPENMP_FOUND"
			],
			[
				"E",
				"ELSE"
			],
			[
				"STA",
				"STATIC_LIB"
			],
			[
				"Sa",
				"Saphir"
			],
			[
				"OPE",
				"OPENMP_FOUND"
			],
			[
				"S",
				"SAPHIRCONFIG_HPP_INCLUDED"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#ifndef HDRIMAGE_HPP_INCLUDED\n#define HDRIMAGE_HPP_INCLUDED\n\n#include <HDRimageConfig.hpp>\n#include <cassert>\n#include <array>\n\nnamespace details {\n\n// Copy n values from the parameter pack to an output iterator\ntemplate < typename OutputIterator >\nvoid copy_n( size_t, OutputIterator )\n{\n}\n\ntemplate < typename OutputIterator, typename T, typename... Args >\nvoid copy_n( size_t n, OutputIterator out, T const & value, Args... args )\n{\n  if ( n > 0 ) {\n    *out = value;\n    copy_n( n - 1, ++out, args... );\n  }\n}\n\n// Copy n values from the parameter pack to an output iterator, starting at\n// the \"beginth\" element\ntemplate < typename OutputIterator >\nvoid copy_range( size_t, size_t, OutputIterator )\n{\n}\n\ntemplate < typename OutputIterator, typename T, typename... Args >\nvoid copy_range( size_t begin, size_t size, OutputIterator out, T value, Args... args )\n{\n	if ( begin == 0 ) {\n		copy_n( size, out, value, args... );\n	}\n	else {\n		copy_range( begin - 1, size, out, args... );\n	}\n}\n\n} // namespace details\n\nnamespace hdr {\n\ntypedef struct {\n	/* Define a block of pixel to vectorize code. \n	 * AVX format\n	 */\n	float r[ 8 ];\n	float g[ 8 ];\n	float b[ 8 ];\n} pixelBlock;\n\nenum pfmEndianess : int32_t {\n	PFM_LITTLE_ENDIAN = -1,\n	PFM_BIG_ENDIAN    =  1\n};\n\nenum class uint32_t {\n	ASCIIBitmap    = '1',\n	ASCIIGreymap   = '2',\n	ASCIIColormap  = '3',\n	BinaryBitmap   = '4',\n	BinaryGreymap  = '5',\n	BinaryColormap = '6'\n};\nclass image {\n\n/* Row major matrix of pixelBlock */\npublic:\n	image( void ) noexcept;\n	image( uint32_t, uint32_t, uint32_t = 1 ) noexcept;\n	image( image const & ) noexcept;\n\n	// move constructor\n	// overload operator= (move)\n\n	image & operator= ( image const & ) noexcept;\n\n	image & create( uint32_t, uint32_t, uint32_t = 1 ) noexcept;\n	image & copy  ( image const & ) noexcept;\n\n	INLINE uint32_t getWidth     ( void ) const noexcept;\n	INLINE uint32_t getHeight    ( void ) const noexcept;\n	INLINE size_t   getPadd      ( void ) const noexcept;\n\n	INLINE bool isEmpty( void ) const noexcept;\n\n	void free ( void ) noexcept;\n\n	void normalise( float = 1 ) noexcept;\n\n	int32_t loadPNM( \n		std::string const &\n	) noexcept;\n	int32_t savePNM( \n		std::string const &, pnm_t = pnm_t::BinaryColormap \n	) const noexcept;\n\n	int32_t loadPFM( \n		std::string const &\n	) noexcept;\n	int32_t savePFM( \n		std::string const &, pfm_t = pfm_t::BinaryColormap \n	) const noexcept;\n\n	template < class CWF, class... Args >\n	int32_t createHDR( const Args&... args );\n\n	~image( void ) noexcept;\n\nprotected:\n	void alloc( uint32_t, uint32_t ) noexcept;\n\nprivate:\n	uint32_t      m_width;\n	uint32_t      m_height;\n	size_t        m_padd;\n	uint32_t      m_max_pixel_chanel;\n	pixelBlock**  m_data_2D;\n	pixelBlock*   m_data_1D;\n};\n\nclass hinge_cwf {\npublic:\n\n	hinge_cwf( void ) noexcept  = default;\n	hinge_cwf( hinge_cwf const & ) = default;\n	~hinge_cwf( void ) noexcept = default;\n\n	INLINE float operator( ) ( float x ) {\n		if      ( x < 0   ) return 0;\n		else if ( x < 0.5 ) return 2 * x;\n		else if ( x < 1   ) return 1 - 2 * x;\n		else                return 0;\n	}\n\nprivate:\n};\n\nuint32_t \nimage::getWidth( void ) const noexcept\n{\n	return m_width;\n}\n\nuint32_t \nimage::getHeight( void ) const noexcept\n{\n	return m_height;\n}\n\nsize_t \nimage::getPadd( void ) const noexcept\n{\n	return m_padd;\n}\n\nbool \nimage::isEmpty( void ) const noexcept \n{\n	return m_data_1D == nullptr;\n}\n\ntemplate < class CWF, class... Args >\nint32_t \nimage::createHDR( Args const &... args ) {\n\n	uint32_t constexpr N( sizeof... ( Args ) );\n	std::array< hdr::image, N > image_set;\n	std::array< float, 3 * N >      E;\n	// CWF func;\n\n	details::copy_range( 0, N, image_set.begin( ), args... );\n\n    uint32_t width  = image_set[ 0 ].m_width;\n    uint32_t height = image_set[ 0 ].m_height;\n    for ( uint32_t l = 0; l < N; ++l ) {\n    	if (\n    		( image_set[ l ].m_width != width ) ||\n    		( image_set[ l ].m_height != height )\n    	) {\n    		return -1;\n    	}\n    }\n    uint32_t width_block_number( ( width - 1 ) / 8 );\n    uint32_t width_block_end( width_block_number * 8 );\n\n    create( width, height, 1 );\n\n    E.fill( 0 );\n    for ( uint32_t i = 0; i < height; ++i ) {\n        for ( uint32_t j = 0; j < width_block_number; ++j ) {\n        	for ( uint32_t l = 0; l < N; ++l ) {\n	            for ( uint32_t k = 0; k < 8; ++k ) {\n	                E[ 3 * l     ] += image_set[ l ].m_data_2D[ i ][ j ].r[ k ];\n	                E[ 3 * l + 1 ] += image_set[ l ].m_data_2D[ i ][ j ].g[ k ];\n	                E[ 3 * l + 2 ] += image_set[ l ].m_data_2D[ i ][ j ].b[ k ];\n	            }\n	        }\n        }\n        for ( uint32_t l = 0; l < N; ++l ) {\n	        for ( uint32_t k = 0; width_block_end + k < width; ++k ) {\n	            E[ 3 * l     ] += image_set[ l ].m_data_2D[ i ][ width_block_number ].r[ k ];\n	            E[ 3 * l + 1 ] += image_set[ l ].m_data_2D[ i ][ width_block_number ].g[ k ];\n	            E[ 3 * l + 2 ] += image_set[ l ].m_data_2D[ i ][ width_block_number ].b[ k ];\n	        }\n	    }\n    }\n\n    for ( uint32_t i = 0; i < N; ++ i ) {\n    	std::cout << \"gray  ( \" << i << \" ): \" << ( E[ 3 * i ] + E[ 3 * i + 1 ] + E[ 3 * i + 2 ] ) / ( E[ 0 ] + E[ 1 ] +  E[ 2 ] ) << std::endl;\n    }\n\n	return 0;\n}\n\n} // namespace hdr\n\n#endif",
			"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/include/HDRimage.hpp",
			"file_size": 5279,
			"file_write_time": 1359508227000000,
			"settings":
			{
				"buffer_size": 5189,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/src/main.cpp",
			"settings":
			{
				"buffer_size": 566,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/src/HDRimage_io.cpp",
			"settings":
			{
				"buffer_size": 33805,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/src/HDRimage_processing.cpp",
			"settings":
			{
				"buffer_size": 1032,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 2279,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/HDRimageConfig.hpp.in",
			"settings":
			{
				"buffer_size": 1422,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/License.txt",
			"settings":
			{
				"buffer_size": 35148,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/README.md",
			"settings":
			{
				"buffer_size": 592,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/install.sh",
			"settings":
			{
				"buffer_size": 3139,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/CMake/Compiler/Compiler.cmake",
			"settings":
			{
				"buffer_size": 3106,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/install_script.sublime-build",
	"command_palette":
	{
		"height": 52.0,
		"selected_items":
		[
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"Package Control:  in",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/romain/Dropbox/Traitement_Image/events.h",
		"/home/romain/.cache/.fr-2eRDXu/graphics/fractal.c",
		"/home/romain/Dropbox/Imperial College/Advanced-Graphics/src/HDRimage_processing.cpp",
		"/home/romain/Dropbox/Imperial College/Advanced-Graphics/src/HDRimage.cpp",
		"/home/romain/Dropbox/Imperial College/Advanced-Graphics/Report/Specs/CO417-HW1/ExampleCode/loadPNM.cpp",
		"/home/romain/Dropbox/Imperial College/Advanced-Graphics/CMakeLists.txt",
		"/home/romain/Dropbox/Imperial College/Advanced-Graphics/README.md",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/src/main.cpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/src/HDRimage.cpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/License.txt",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/install.sh",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/HDRimage.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/HDRimageConfig.hpp.in",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/CMake/Compiler/Compiler.cmake",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/CMakeLists.txt",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/Numa.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/Monitoring.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/src/Numa.cpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/src/Monitoring.cpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/bin/usr/local/bin/test.ppm",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/bin/usr/local/bin/memorial5.ppm",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/Report/Specs/CO417-HW1/ExampleCode/loadPNM.h",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/Report/Specs/CO417-HW1/ExampleCode/main.cpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/Report/Specs/CO417-HW1/ExampleCode/loadPNM.cpp",
		"/var/tmp/pnm.c",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/build/HDRimageConfig.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/matrix/Matrix.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/matrix/host/class/MatrixClass.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/class/MatrixClass.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/Print.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/PrintBin.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/PrintDataBin.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/PrintHeader.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/PrintData.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/PrintHeaderBin.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/Read.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/ReadBin.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/ReadData.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/ReadDataBin.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/ReadHeader.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Stream/ReadHeaderBin.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Setter/Copy.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Setter/Link.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Setter/Fill.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Setter/Set.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/Allocate.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Operator/OperatorGetterMatrix.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Operator/OperatorArithmeticMatrix.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Operator/OperatorAssignmentMatrix.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Operator/OperatorCastMatrix.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Operator/OperatorComparisonMatrix.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Operator/OperatorStreamMatrix.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Iterator/IteratorMatrix.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Instantiation/InstantiationBasicMatrix.cpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Getter/Test.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Getter/Pointer.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Getter/Header.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Getter/At.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Exception/Exception.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Constructor/CopyConstructor.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Constructor/DefaultConstructor.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Constructor/Destructor.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Constructor/InitializeConstructor.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Constructor/MoveConstructor.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Constructor/PointerConstructor.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Constructor/SimpleConstructor.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Constructor/StreamConstructor.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/Clone.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/FlushCache.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/Free.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/FreeLine.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/FreeData.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/Move.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/Resize.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/SetCache.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/Shuffle.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/Swap.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/host/Base/Transpose.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/MacrosHDRimage.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/HDRimageConfig.hpp.in",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/HDRimageConfig.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/CMake/cpp11/CheckCXX11Features.cmake",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/relaxing.hpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/relaxingConfig.hpp.in",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/src/relaxing.cpp",
		"/home/romain/Dropbox/Imperial College/Advanced Graphics/include/relaxingConfig.hpp",
		"/home/romain/Dropbox/Yasl/CPUTools-0.1.0/CPUTools/CMakeLists.txt",
		"/home/romain/Dropbox/Yasl/CPUTools-0.1.0/CMakeLists.txt",
		"/home/romain/Dropbox/Yasl/CMake/Modules/hwloc/Findhwloc.cmake",
		"/home/romain/Dropbox/Yasl/CPUTools-0.1.0/hwloc-1.6.1/CMakeLists.txt",
		"/home/romain/Dropbox/Yasl/CPUTools-0.1.0/CPUToolsBuildTreeSettings.cmake.in",
		"/home/romain/Dropbox/Yasl/hwloc-1.6.1/CMakeLists.txt",
		"/home/romain/Dropbox/Yasl/CMake/Compiler/Compiler.cmake",
		"/home/romain/Dropbox/Yasl/CMake/Modules/Compiler/Compiler.cmake",
		"/home/romain/Dropbox/Yasl/CMake/hwloc/hwlocInstall.cmake",
		"/home/romain/Dropbox/Yasl/CPUTools-0.1.0/install.sh",
		"/home/romain/Dropbox/Yasl/CPUTools-0.1.0/uninstall.sh",
		"/home/romain/Dropbox/Yasl/CPUTools-0.1.0/License.txt",
		"/home/romain/.cache/.fr-vp2ZY3/hwloc-1.7a1r5253/doc/hwloc-hello.c",
		"/home/romain/Documents/amo FranziFriends1/29/please read me.txt",
		"/home/romain/Dropbox/Yasl/CPUTools-0.1.0/CPUTools.cmake.in",
		"/home/romain/Dropbox/Yasl/libCPUTools/sample/perftool/src/perftool.cpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/src/Info.cpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/src/Control.cpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/src/Monitoring.cpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/src/Numa.cpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/src/Topology.cpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/include/Numa.hpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/include/SSE.hpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/include/Topology.hpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/include/Control.hpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/include/Monitoring.hpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/include/Info.hpp",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/CPUTools.hpp.in",
		"/home/romain/Dropbox/Yasl/CMakeLists.txt",
		"/home/romain/Dropbox/Yasl/libCPUTools/sample/perftool/CMakeLists.txt",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools.cmake.in",
		"/home/romain/Dropbox/Yasl/libCPUTools/install.sh",
		"/home/romain/Dropbox/Yasl/CMake/cpp11/CheckCXX11Features.cmake",
		"/home/romain/Dropbox/Yasl/libCPUTools/sample/CMakeLists.txt",
		"/home/romain/Dropbox/Yasl/libCPUTools/CMakeLists.txt",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/CMakeLists.txt",
		"/home/romain/Downloads/linux-3.8-rc3/tools/power/cpupower/utils/helpers/msr.c",
		"/home/romain/Downloads/linux-3.8-rc3/arch/x86/lib/msr.c",
		"/home/romain/Downloads/linux-3.8-rc3/arch/x86/kernel/msr.c",
		"/var/tmp/sched.h",
		"/home/romain/Downloads/linux-3.8-rc3/tools/power/cpupower/bench/cpufreq-bench_script.sh",
		"/home/romain/Dropbox/Yasl/libCPUTools/CPUTools/src/msr.cpp"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"pnm_t",
			"pnm_t::",
			"pnm_t",
			"pfm_t",
			"pfm_t::",
			"norma",
			"loadPFM",
			"getCPU",
			"startBen",
			"/ m_op",
			"numa",
			"grey_val",
			"gray_val",
			"savePNM",
			"buf",
			"m_block_width",
			"m_block_height",
			"numComponents",
			"dim1",
			"dim2",
			"buf",
			"ck",
			"SA",
			"sa",
			"config",
			"install",
			"relaxin",
			"relaxn",
			"include",
			"relaxing",
			"ROOT_DIRECTORY",
			"sudo",
			"sufo",
			"modul",
			"hwloc",
			"sample",
			"CPUTools",
			"static",
			"hwloc",
			"xiar",
			"hwloc",
			"lin",
			"export",
			"FORCE",
			"if",
			"set",
			"rusage",
			"printPageFaults",
			"printCores",
			"printBenchmark",
			"printCycleCounter",
			"printTimer",
			"m_core_stop",
			"getCPU",
			"CPU",
			"getCPU",
			"c++0x",
			"INLINE",
			"name",
			"stopCountCycles",
			"__tsc_readP",
			"readTSC",
			"Name",
			"Op",
			"GetcycleOverhead",
			"CycleOverhead",
			"cycleOverhead",
			"stopCountCycles",
			"StartCountCycles",
			"EplasedTime",
			"StopTimer",
			"StartTimer",
			"Rename",
			"sched_getscheduler",
			"msr_read",
			"getTi",
			"getTid",
			"getPid",
			"alloc",
			"SA_PURE",
			"SA_INLINE",
			"INLINE",
			"include_dire",
			"msr",
			"EDX_",
			"ECX_",
			"cpu::info::cpuid",
			"Supported(",
			".c",
			"config",
			"confi",
			"SA_",
			"sa::",
			"SA_",
			"sa",
			"sa::",
			"SA_CPU",
			"FEAT_",
			"sa::cpu",
			"SA_GNU_CXX_COMPILER",
			"SA_INTEL_CXX_COMPILER",
			"SA_INTEL_C_COMPILER",
			"SA_GNU_C_COMPILER",
			"SA_CXX_COMPILER",
			"SA_C_COMPILER",
			"CMAKE_C_COMPILER",
			"CMAKE_SOURCE_DIR",
			"test",
			"SAPHIR",
			"sas",
			"get",
			"m_end",
			"m_begin",
			"setExitOn",
			"allocator_type",
			"get",
			"pid",
			"this->get( )",
			"this->free( );",
			"this->bitmask::",
			"bitmask",
			"string",
			"free",
			"cpumask",
			"numa_",
			"__cplusplus",
			"include",
			"cuda_found"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"grey_val",
			"HDR",
			"hdr",
			"HDRimage",
			"",
			"IF",
			"SET",
			"printCores_core",
			"printBenchmark_core",
			"printCycleCounter_core",
			"printTimer_core",
			"m_core_end",
			"c++11",
			"INLINE_F",
			"__tscp_read",
			"__tsc_read",
			"__tes_read",
			"name",
			"op",
			"getcycleOverhead",
			"cycleOverhead",
			"startCountCycles",
			"eplasedTime",
			"stopTimer",
			"startTimer",
			"rename",
			"PURE",
			"INLINE",
			"",
			"cpu::info::__cpuid",
			"(",
			"",
			"cpu::",
			"",
			"cpu::info::feature",
			"",
			"cpu::info",
			"GNU_CXX_COMPILER",
			"INTEL_CXX_COMPILER",
			"INTEL_C_COMPILER",
			"GNU_C_COMPILER",
			"CXX_COMPILER",
			"C_COMPILER",
			"CPUTOOLS",
			"m_timer_end",
			"m_timer_start",
			"policy",
			"bitmask::get( )",
			"bitmask::free( );",
			"this->",
			"std::string",
			"",
			"SA_CPU::",
			"",
			"SA_CPU_FEAT_",
			"uint32_t",
			") noexcept {",
			"ROOT_DIRECTORY",
			"IF",
			"SET",
			"INCLUDE",
			"SET",
			"GET_FILENAME_COMPONENT",
			"ENDFOREACH",
			"ADD_SUBDIRECTORY",
			"FOREACH",
			"IF(",
			"ENDIF",
			"INSTALL",
			"ENDIF",
			"ELSE",
			"IF",
			"ADD_library",
			"SET_TARGET_PROPERTIES",
			"OPTION",
			"FILE",
			"CONFIGURE_FILE",
			"CMAKE_MINIMUM_REQUIRED",
			"PROJECT",
			"MESSAGE",
			"IF",
			"ELSE",
			"ENDIF",
			"INCLUDE_DIRECTORIES",
			"INCLUDE",
			"INSTALL",
			"FILE",
			"CONFIGURE_FILE",
			"EXPORT",
			"OPTION",
			"SET",
			"noexcept",
			"static_assert",
			"Config.hpp",
			"Saphir",
			"SAPHIR",
			"sample",
			"lib",
			"SAPHIR",
			"Saphir",
			"lib",
			"sample",
			"Saphir",
			"lib",
			"sample",
			"lib",
			"SAPHIR",
			"Saphir",
			"+=",
			"=",
			"struct m256i",
			"struct m128i"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/include/HDRimage.hpp",
					"settings":
					{
						"buffer_size": 5189,
						"regions":
						{
						},
						"selection":
						[
							[
								1269,
								1269
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 546.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/src/main.cpp",
					"settings":
					{
						"buffer_size": 566,
						"regions":
						{
						},
						"selection":
						[
							[
								533,
								533
							]
						],
						"settings":
						{
							"rulers":
							[
								80
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/src/HDRimage_io.cpp",
					"settings":
					{
						"buffer_size": 33805,
						"regions":
						{
						},
						"selection":
						[
							[
								30475,
								30475
							]
						],
						"settings":
						{
							"rulers":
							[
								80
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12146.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/src/HDRimage_processing.cpp",
					"settings":
					{
						"buffer_size": 1032,
						"regions":
						{
						},
						"selection":
						[
							[
								141,
								141
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/CMakeLists.txt",
					"settings":
					{
						"buffer_size": 2279,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CMake/CMake.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/HDRimageConfig.hpp.in",
					"settings":
					{
						"buffer_size": 1422,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/License.txt",
					"settings":
					{
						"buffer_size": 35148,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/README.md",
					"settings":
					{
						"buffer_size": 592,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/install.sh",
					"settings":
					{
						"buffer_size": 3139,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 336.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/romain/Dropbox/Imperial College/Advanced-Graphics/CMake/Compiler/Compiler.cmake",
					"settings":
					{
						"buffer_size": 3106,
						"regions":
						{
						},
						"selection":
						[
							[
								1353,
								1353
							]
						],
						"settings":
						{
							"syntax": "Packages/CMake/CMake.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 210.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				0,
				1,
				1,
				2
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.370604781997,
			1.0
		],
		"rows":
		[
			0.0,
			0.731682192837,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 178.0,
	"status_bar_visible": true
}
